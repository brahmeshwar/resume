{"version":3,"sources":["assets/3511100.jpg","config.ts","TopBar/ProfileImage/ProfileImage.tsx","TopBar/TopInfo/Name.tsx","components/components.ts","TopBar/TopInfo/Location.tsx","TopBar/TopInfo/Phone.tsx","TopBar/TopInfo/Email.tsx","TopBar/TopInfo/Designation.tsx","TopBar/TopInfo/TopInfo.tsx","TopBar/TopBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Config","ImageBox","styled","div","width","ProfileImage","style","height","maxHeight","maxWidth","margin","marginLeft","alt","src","profilePic","NameBox","fontWeight","fontSize","textTransform","Name","name","ComponentBox","display","flexDirection","marginTop","ContentBox","Location","location","Phone","phone","Email","textDecoration","color","href","email","Designation","designation","InfoBox","TopInfo","FlexCard","backgroundColor","borderRadius","boxShadow","TopBar","props","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,qC,iHCA/BC,E,qECKNC,EAAWC,IAAOC,IAAI,CACxBC,MAAO,QAaIC,EATuB,WAClC,OACI,kBAAC,WAAD,KACI,kBAACJ,EAAD,KACI,yBAAKK,MAAO,CAACF,MAAO,OAAQG,OAAQ,OAASC,UAAW,IAAKC,SAAS,IAAKC,OAAQ,GAAIC,WAAW,IAAKC,IAAI,GAAGC,IAAKC,U,SDdvHd,K,6BAAAA,E,4FAAAA,E,uCAAAA,E,kCAAAA,E,kCAAAA,M,KEIZ,IAAMe,EAAUb,IAAOC,IAAI,CACvBa,WAAY,IACZC,SAAU,GACVC,cAAe,cAWJC,EATe,WAC1B,OACI,kBAAC,WAAD,KACI,kBAACJ,EAAD,KACMf,EAAOoB,QCZZC,EAAenB,IAAOC,IAAI,CACnCmB,QAAS,OACTC,cAAe,MACfC,UAAW,KAGFC,EAAavB,IAAOC,IAAI,CACjCC,MAAO,OACPM,OAAQ,ICWGgB,EAbkB,WAC7B,OACI,kBAAC,WAAD,KACI,kBAACL,EAAD,KACI,yBAAKR,IAAI,mDAAmDD,IAAI,KAChE,kBAACa,EAAD,KACKzB,EAAO2B,aCRfC,EAAiB,WAC1B,OACI,kBAAC,WAAD,KACI,kBAACP,EAAD,KACI,yBAAKR,IAAI,mDAAmDD,IAAI,KAChE,kBAACa,EAAD,KACMzB,EAAO6B,UCNhBC,EAAiB,WAC1B,OACI,kBAAC,WAAD,KACI,kBAACT,EAAD,KACI,yBAAKR,IAAI,mDAAmDD,IAAI,KAChE,kBAACa,EAAD,KACJ,uBAAGnB,MAAO,CAACyB,eAAgB,OAAQC,MAAO,QAASC,KAAI,iBAAYjC,EAAOkC,QAA1E,IAAqFlC,EAAOkC,MAA5F,SCPCC,EAAwB,WACjC,OACI,kBAAC,WAAD,KACI,kBAACd,EAAD,KACI,yBAAKR,IAAI,mDAAmDD,IAAI,KAChE,kBAACa,EAAD,CAAYnB,MAAO,CAACU,WAAY,MAC1BhB,EAAOoC,gBCFvBC,EAAUnC,IAAOC,IAAI,CACvBmB,QAAS,OACTC,cAAe,SACfC,UAAW,KAGFc,EAAoB,WAC7B,OACI,kBAAC,WAAD,KACI,kBAACD,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCjBVE,EAAWrC,IAAOC,IAAI,CACxBqC,gBAAiB,OACjBC,aAAc,GACdrC,MAAO,MACPkB,QAAS,OACTC,cAAe,MACfC,UAAW,KACXb,WAAY,MACZ+B,UAAW,uCAgBAC,EAXyB,SAACC,GACrC,OACI,kBAAC,WAAD,KACI,kBAACL,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,SCZDM,MARf,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOpB,SAASqB,UAEe,UAA7BD,OAAOpB,SAASqB,UAEhBD,OAAOpB,SAASqB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.39f028e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/3511100.b25922a2.jpg\";","export enum Config {\n    name = \"Brahmeshwar Sriniketh\",\n    location = \"2nd Avenue, Teachers Colony, 1st Block Koramangala, Bengaluru, Karnataka, India.\",\n    phone = \"+91 9493229900, +91 9080751527\",\n    email = \"brahmeshwar8946@gmail.com\",\n    designation = \"Software Developer\"\n}","import React, { Fragment } from 'react';\nimport styled from '@emotion/styled';\nimport profilePic from '../../../src/assets/3511100.jpg'\n\n\nconst ImageBox = styled.div({\n    width: '30%',\n})\n\n\nexport const ProfileImage: React.FC = () => {\n    return(\n        <Fragment>\n            <ImageBox>\n                <img style={{width: '100%', height: '100%',  maxHeight: 200, maxWidth:160, margin: 10, marginLeft:20}} alt=\"\" src={profilePic} />\n            </ImageBox>\n        </Fragment>\n    )\n}\nexport default ProfileImage;","import React, { Fragment } from 'react';\nimport styled from '@emotion/styled';\nimport { Config } from '../../config';\n\nconst NameBox = styled.div({\n    fontWeight: 600,\n    fontSize: 32,\n    textTransform: 'uppercase',\n})\nexport const Name: React.FC = () => {\n    return (\n        <Fragment>\n            <NameBox>\n                { Config.name }\n            </NameBox>\n        </Fragment>\n    )\n}\nexport default Name;","import styled from '@emotion/styled';\nexport const ComponentBox = styled.div({\n    display: 'flex',\n    flexDirection: 'row',\n    marginTop: 10,\n})\n\nexport const ContentBox = styled.div({\n    width: '100%',\n    margin: 5,\n})","import React, { Fragment } from 'react';\nimport { Config } from '../../config';\nimport { ComponentBox, ContentBox } from '../../components/components';\n\n\n\n\nexport const Location:React.FC = () => {\n    return(\n        <Fragment>\n            <ComponentBox>\n                <img src=\"https://cdn.convertcart.com/uploads/b2f804bd.svg\" alt=\"\" />\n                <ContentBox>\n                    {Config.location}\n                </ContentBox>\n            </ComponentBox>\n        </Fragment>\n    )\n}\n\nexport default Location;","import React, { Fragment } from 'react';\nimport { Config } from '../../config';\nimport { ComponentBox, ContentBox } from '../../components/components';\n\n\nexport const Phone:React.FC = () => {\n    return (\n        <Fragment>\n            <ComponentBox>\n                <img src=\"https://cdn.convertcart.com/uploads/2b23e08a.svg\" alt=\"\"/>\n                <ContentBox>\n                    { Config.phone }\n                </ContentBox>\n            </ComponentBox>\n        </Fragment>\n    )\n}","import React, { Fragment } from 'react';\nimport { Config } from '../../config';\nimport { ContentBox, ComponentBox } from '../../components/components';\n\n\nexport const Email:React.FC = () => {\n    return(\n        <Fragment>\n            <ComponentBox>\n                <img src=\"https://cdn.convertcart.com/uploads/20e8982e.svg\" alt=\"\" />\n                <ContentBox>\n            <a style={{textDecoration: 'none', color: '#000'}} href={`mailto:${Config.email}`}> {Config.email} </a>\n            </ContentBox>\n            </ComponentBox>\n        </Fragment>\n    )\n}\n\nexport default Email;","import React, { Fragment } from 'react';\nimport { ComponentBox, ContentBox } from '../../components/components';\nimport { Config } from '../../config';\n\nexport const Designation:React.FC  = () => {\n    return(\n        <Fragment>\n            <ComponentBox>\n                <img src=\"https://cdn.convertcart.com/uploads/8aa459ae.svg\" alt=\"\"/>\n                <ContentBox style={{fontWeight: 600}}>\n                    { Config.designation }\n                </ContentBox>\n            </ComponentBox>\n        </Fragment>\n    )\n}","import React, { Fragment } from 'react';\nimport styled from '@emotion/styled';\nimport Name from './Name';\nimport Location from './Location';\nimport { Phone } from './Phone';\nimport { Email } from './Email';\nimport { Designation } from './Designation';\n\nconst InfoBox = styled.div({\n    display: 'flex',\n    flexDirection: 'column',\n    marginTop: 26\n})\n\nexport const TopInfo: React.FC = () => {\n    return(\n        <Fragment>\n            <InfoBox>\n                <Name />\n                <Designation />\n                <Location />\n                <Phone />\n                <Email />\n            </InfoBox>\n        </Fragment>\n    )\n}","import  React, { Fragment } from 'react';\nimport styled from '@emotion/styled';\nimport ProfileImage from './ProfileImage/ProfileImage';\nimport { TopInfo } from './TopInfo/TopInfo';\n\nconst FlexCard = styled.div({\n    backgroundColor: '#fff',\n    borderRadius: 10,\n    width: '75%',\n    display: 'flex',\n    flexDirection: 'row',\n    marginTop: '2%',\n    marginLeft: '10%',\n    boxShadow: '0px 0px 0px 2px rgb(249, 246, 246)'\n})\ninterface IProps {\n\n}\nexport const TopBar: React.FC<IProps> = (props) => {\n    return(\n        <Fragment>\n            <FlexCard>\n                <ProfileImage />\n                <TopInfo />\n            </FlexCard>\n        </Fragment>\n    )\n}\n\nexport default TopBar;","import React, { Fragment } from 'react';\nimport './App.css';\nimport TopBar from './TopBar/TopBar';\nfunction App() {\n  return (\n    <Fragment>\n      <TopBar />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}